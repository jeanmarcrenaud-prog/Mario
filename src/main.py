import sys
import atexit
import threading
import time
from .config import config
from .utils.file_analyzer import FileAnalyzer
from .utils.logger import logger
from .ui.interface import AssistantInterface
from .utils.system_monitor import get_system_info
from .core.speech_recognition import SpeechRecognizer
from .core.text_to_speech import TextToSpeech

class AssistantVocal:
    def __init__(self):
        self.interface = None
        self.speech_recognizer = None
        self.tts = None
        self._is_running = False
        self._setup_cleanup()

    def _setup_cleanup(self):
        """Configure le nettoyage √† la fermeture."""
        atexit.register(self._cleanup)

    def _cleanup(self):
        """Nettoie les ressources."""
        logger.info("Nettoyage des ressources...")
        self._is_running = False
        
        # Nettoyage sp√©cifique des composants
        if self.speech_recognizer:
            try:
                self.speech_recognizer.cleanup()
            except Exception as e:
                logger.error(f"Erreur lors du nettoyage du recognizer: {e}")
        
        if self.tts:
            try:
                self.tts.cleanup()
            except Exception as e:
                logger.error(f"Erreur lors du nettoyage du TTS: {e}")

    def _preload_models(self):
        """Pr√©charge les mod√®les n√©cessaires."""
        logger.info("Pr√©chargement des mod√®les...")

        try:
            # Pr√©chargement de Whisper
            logger.info("Chargement du mod√®le Whisper...")
            self.speech_recognizer = SpeechRecognizer()
            if not self.speech_recognizer.load_model(config.WHISPER_MODEL_NAME):
                logger.error("√âchec du chargement du mod√®le Whisper")
                return False
            logger.info("Mod√®le Whisper charg√© avec succ√®s")

            # Chargement de Piper
            logger.info("Chargement de la voix Piper...")
            self.tts = TextToSpeech(default_voice=config.DEFAULT_PIPER_VOICE)
            logger.info(f"Voix Piper '{config.DEFAULT_PIPER_VOICE}' pr√™te")
            
            return True
            
        except Exception as e:
            logger.error(f"Erreur lors du pr√©chargement des mod√®les: {e}")
            return False

    def say(self, text: str):
        """Synth√©tise et joue un texte."""
        try:
            if self.tts is None:
                logger.error("TTS non initialis√©")
                return
                
            audio_data = self.tts.synthesize(text)
            if audio_data is not None:
                # Ici, ajoutez le code pour jouer l'audio (par exemple, avec pyaudio)
                logger.info("Lecture de l'audio synth√©tis√©")
                # Exemple de code pour jouer l'audio :
                self._play_audio(audio_data)
            else:
                logger.error("√âchec de la synth√®se vocale")
                
        except Exception as e:
            logger.error(f"Erreur lors de la synth√®se vocale: {e}")

    def _play_audio(self, audio_data):
        """M√©thode pour jouer l'audio (√† impl√©menter selon votre solution)"""
        # Exemple avec pyaudio :
        import pyaudio
        p = pyaudio.PyAudio()
        stream = p.open(format=pyaudio.paInt16, channels=1, rate=config.SAMPLERATE, output=True)
        stream.write(audio_data)
        stream.stop_stream()
        stream.close()
        p.terminate()
        pass

    def run(self):
        """D√©marre l'assistant."""
        try:
            logger.info("D√©marrage de l'assistant vocal")
            logger.info(get_system_info())

            # Pr√©chargement des mod√®les
            if not self._preload_models():
                logger.error("√âchec du pr√©chargement des mod√®les")
                sys.exit(1)

            # Cr√©ation de l'interface avec le recognizer pr√©charg√©
            logger.info("Cr√©ation de l'interface...")
            self.interface = AssistantInterface(speech_recognizer=self.speech_recognizer)

            # Cr√©ation et lancement de l'interface
            app = self.interface.create_interface()
            logger.info("Interface cr√©√©e, d√©marrage du serveur...")
            
            import socket
            local_ip = socket.gethostbyname(socket.gethostname())
            logger.info(f"[WEB] Acc√®s local : http://{local_ip}:{config.INERFACE_PORT}")
            
            # D√©marrage du serveur dans un thread s√©par√© pour √©viter les blocages
            def start_server():
                app.launch(
                    server_name="0.0.0.0",      # üåç Permet l‚Äôacc√®s depuis le r√©seau local
                    server_port=config.INTERFACE_PORT,
                    share=False,
                    inbrowser=True
                )
            
            server_thread = threading.Thread(target=start_server, daemon=True)
            server_thread.start()
            
            # Maintien en vie de l'assistant
            self._is_running = True
            while self._is_running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("Arr√™t par l'utilisateur")
        except Exception as e:
            logger.error(f"Erreur fatale: {e}")
            sys.exit(1)
        finally:
            self._cleanup()

if __name__ == "__main__":
    assistant = AssistantVocal()
    assistant.run()
